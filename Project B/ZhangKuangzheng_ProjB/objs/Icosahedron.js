function defIcosahedron() {
    let Icosahedron_Vertices = new Float32Array([
        1.0, 0.0, 0.6180337177056159, 1.0, 0.9341722745620061, 0.35682231073693815, 0.0,
        1.0, 0.0, -0.6180337177056159, 1.0, 0.9341722745620061, 0.35682231073693815, 0.0,
        0.6180337177056159, 1.0, 0.0, 1.0, 0.9341722745620061, 0.35682231073693815, 0.0,
        1.0, 0.0, 0.6180337177056159, 1.0, 0.9341722745620061, -0.35682231073693815, 0.0,
        0.6180337177056159, -1.0, 0.0, 1.0, 0.9341722745620061, -0.35682231073693815, 0.0,
        1.0, 0.0, -0.6180337177056159, 1.0, 0.9341722745620061, -0.35682231073693815, 0.0,
        -1.0, 0.0, -0.6180337177056159, 1.0, -0.9341722745620061, 0.35682231073693815, 0.0,
        -1.0, 0.0, 0.6180337177056159, 1.0, -0.9341722745620061, 0.35682231073693815, 0.0,
        -0.6180337177056159, 1.0, 0.0, 1.0, -0.9341722745620061, 0.35682231073693815, 0.0,
        -1.0, 0.0, 0.6180337177056159, 1.0, -0.9341722745620061, -0.35682231073693815, -0.0,
        -1.0, 0.0, -0.6180337177056159, 1.0, -0.9341722745620061, -0.35682231073693815, -0.0,
        -0.6180337177056159, -1.0, 0.0, 1.0, -0.9341722745620061, -0.35682231073693815, -0.0,
        0.6180337177056159, 1.0, 0.0, 1.0, 0.0, 0.9341722745620061, 0.35682231073693815,
        -0.6180337177056159, 1.0, 0.0, 1.0, 0.0, 0.9341722745620061, 0.35682231073693815,
        0.0, 0.6180337177056159, 1.0, 1.0, 0.0, 0.9341722745620061, 0.35682231073693815,
        -0.6180337177056159, 1.0, 0.0, 1.0, 0.0, 0.9341722745620061, -0.35682231073693815,
        0.6180337177056159, 1.0, 0.0, 1.0, 0.0, 0.9341722745620061, -0.35682231073693815,
        0.0, 0.6180337177056159, -1.0, 1.0, 0.0, 0.9341722745620061, -0.35682231073693815,
        0.0, -0.6180337177056159, -1.0, 1.0, 0.35682231073693815, 0.0, -0.9341722745620061,
        0.0, 0.6180337177056159, -1.0, 1.0, 0.35682231073693815, 0.0, -0.9341722745620061,
        1.0, 0.0, -0.6180337177056159, 1.0, 0.35682231073693815, 0.0, -0.9341722745620061,
        0.0, 0.6180337177056159, -1.0, 1.0, -0.35682231073693815, -0.0, -0.9341722745620061,
        0.0, -0.6180337177056159, -1.0, 1.0, -0.35682231073693815, -0.0, -0.9341722745620061,
        -1.0, 0.0, -0.6180337177056159, 1.0, -0.35682231073693815, -0.0, -0.9341722745620061,
        0.6180337177056159, -1.0, 0.0, 1.0, -0.0, -0.9341722745620061, -0.35682231073693815,
        -0.6180337177056159, -1.0, 0.0, 1.0, -0.0, -0.9341722745620061, -0.35682231073693815,
        0.0, -0.6180337177056159, -1.0, 1.0, -0.0, -0.9341722745620061, -0.35682231073693815,
        -0.6180337177056159, -1.0, 0.0, 1.0, 0.0, -0.9341722745620061, 0.35682231073693815,
        0.6180337177056159, -1.0, 0.0, 1.0, 0.0, -0.9341722745620061, 0.35682231073693815,
        0.0, -0.6180337177056159, 1.0, 1.0, 0.0, -0.9341722745620061, 0.35682231073693815,
        0.0, 0.6180337177056159, 1.0, 1.0, 0.35682231073693815, 0.0, 0.9341722745620061,
        0.0, -0.6180337177056159, 1.0, 1.0, 0.35682231073693815, 0.0, 0.9341722745620061,
        1.0, 0.0, 0.6180337177056159, 1.0, 0.35682231073693815, 0.0, 0.9341722745620061,
        0.0, -0.6180337177056159, 1.0, 1.0, -0.35682231073693815, 0.0, 0.9341722745620061,
        0.0, 0.6180337177056159, 1.0, 1.0, -0.35682231073693815, 0.0, 0.9341722745620061,
        -1.0, 0.0, 0.6180337177056159, 1.0, -0.35682231073693815, 0.0, 0.9341722745620061,
        0.6180337177056159, 1.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        1.0, 0.0, -0.6180337177056159, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        0.0, 0.6180337177056159, -1.0, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        1.0, 0.0, 0.6180337177056159, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        0.6180337177056159, 1.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        0.0, 0.6180337177056159, 1.0, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        -1.0, 0.0, -0.6180337177056159, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        -0.6180337177056159, 1.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        0.0, 0.6180337177056159, -1.0, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        -0.6180337177056159, 1.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        -1.0, 0.0, 0.6180337177056159, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        0.0, 0.6180337177056159, 1.0, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        1.0, 0.0, -0.6180337177056159, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        0.6180337177056159, -1.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        0.0, -0.6180337177056159, -1.0, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        0.6180337177056159, -1.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        1.0, 0.0, 0.6180337177056159, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        0.0, -0.6180337177056159, 1.0, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        -1.0, 0.0, -0.6180337177056159, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        0.0, -0.6180337177056159, -1.0, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        -0.6180337177056159, -1.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        -1.0, 0.0, 0.6180337177056159, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        -0.6180337177056159, -1.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        0.0, -0.6180337177056159, 1.0, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258

        // 0.0, -1.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // 1.0, 0.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // 0.0, 0.0, 1.0, 1.0, 0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // -1.0, 0.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // 0.0, -1.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // 0.0, 0.0, 1.0, 1.0, -0.5773502691896258, -0.5773502691896258, 0.5773502691896258,
        // 0.0, 1.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // -1.0, 0.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // 0.0, 0.0, 1.0, 1.0, -0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // 1.0, 0.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // 0.0, 1.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // 0.0, 0.0, 1.0, 1.0, 0.5773502691896258, 0.5773502691896258, 0.5773502691896258,
        // 1.0, 0.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // 0.0, -1.0, 0.0, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // 0.0, 0.0, -1.0, 1.0, 0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // 0.0, -1.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // -1.0, 0.0, 0.0, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // 0.0, 0.0, -1.0, 1.0, -0.5773502691896258, -0.5773502691896258, -0.5773502691896258,
        // -1.0, 0.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        // 0.0, 1.0, 0.0, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        // 0.0, 0.0, -1.0, 1.0, -0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        // 0.0, 1.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        // 1.0, 0.0, 0.0, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258,
        // 0.0, 0.0, -1.0, 1.0, 0.5773502691896258, 0.5773502691896258, -0.5773502691896258
    ])
    updateInfo('Icosahedron', 'Body', Icosahedron_Vertices);
}

function drawIcosahedron(interval, modelMatrix, u_ModelMatrix, colorMatrix, u_ColorMatrix, quatMatrix) {
    modelMatrix.rotate(-90, 1, 0, 0);
    // modelMatrix.translate(2, 0, -2);
    modelMatrix.translate(2, 2, 0.5);
    modelMatrix.scale(config.Icosahedron.Size, config.Icosahedron.Size, config.Icosahedron.Size);
    // rotate(interval, 'Icosahedron', 'Body', reciprocate = false);
    // modelMatrix.rotate(config.Icosahedron.Body.angle, 0, 1, 1);
    quatMatrix.setFromQuat(config.Icosahedron.Body.qTot.x, config.Icosahedron.Body.qTot.y, config.Icosahedron.Body.qTot.z, config.Icosahedron.Body.qTot.w);
    modelMatrix.concat(quatMatrix);

    gl.uniformMatrix4fv(u_ModelMatrix, false, modelMatrix.elements);
    gl.drawArrays(gl.TRIANGLE_STRIP, Info.Icosahedron.Body.position, Info.Icosahedron.Body.n);
}

function dragQuat(xdrag, ydrag) {
    let res = 5;
    let qTmp = new Quaternion(0, 0, 0, 1);
    let qNew = new Quaternion(0, 0, 0, 1);
    let distance = Math.sqrt(Math.pow(xdrag, 2) + Math.pow(ydrag, 2));
    // console.log('xdrag,ydrag=',xdrag.toFixed(5),ydrag.toFixed(5),'distance=',distance.toFixed(5));
    // config.Icosahedron.Body.qNew.setFromAxisAngle(-ydrag + 0.0001, xdrag + 0.0001, 0.0, distance * 150.0);

    // qTmp.multiply(config.Icosahedron.Body.qNew, config.Icosahedron.Body.qTot);
    // config.Icosahedron.Body.qTot.copy(qTmp);
    // document.getElementById('QuatValue').innerHTML =
    //     '\t X=' + qTot.x.toFixed(res) +
    //     'i\t Y=' + qTot.y.toFixed(res) +
    //     'j\t Z=' + qTot.z.toFixed(res) +
    //     'k\t W=' + qTot.w.toFixed(res) +
    //     '<br>length=' + qTot.length().toFixed(res);

    let n = new Vector3([at.x - camera.x, at.y - camera.y, at.z - camera.z]);
    let up = new Vector3([0, 0, 1]);
    let u = n.cross(up).normalize();
    let v = u.cross(n).normalize();

    // qNew.setFromAxisAngle(-ydrag * u.elements[0] + xdrag * v.elements[0] + 0.0001, -ydrag * u.elements[2] + xdrag * v.elements[2] + 0.0001, ydrag * u.elements[1] - xdrag * v.elements[1] + 0.0001, distance * 150);
    qNew.setFromAxisAngle(-ydrag * u.elements[0] + xdrag * v.elements[0] + 0.0001, -ydrag * u.elements[1] + xdrag * v.elements[1] + 0.0001, -ydrag * u.elements[2] + xdrag * v.elements[2] + 0.0001, distance * 150);

    qTmp.multiply(qNew, config.Icosahedron.Body.qTot);
    config.Icosahedron.Body.qTot.copy(qTmp);
};